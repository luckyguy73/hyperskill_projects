type: edu
custom_name: stage1
files:
- name: src/flashcards/Main.java
  visible: true
  text: |
    package flashcards;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/FlashcardsTest.java
  visible: false
  text: |
    import common.FlashcardsStage1Test;

    public class FlashcardsTest extends FlashcardsStage1Test {
        // just empty class, but not abstract so it can be run
    }
  learner_created: false
- name: test/common/FlashcardsStage1Test.kt
  visible: false
  text: |
    package common

    import flashcards.Main
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase

    abstract class FlashcardsStage1Test : StageTest<Nothing?>(Main::class.java) {

        override fun generate(): List<TestCase<Nothing?>> {
            return listOf(
                    TestCase()
            )
        }

        override fun check(reply: String, clue: Nothing?): CheckResult {
            val lines = reply.lines().filter { it.isNotEmpty() }

            if (lines.size != LINE_COUNT) {
                return CheckResult(
                        false,
                        "Your program prints ${lines.size} ${lineOrLines(lines.size)}.\n" +
                                "$LINE_COUNT lines were expected."
                )
            }

            val firstLine = lines[0].trim()

            if (firstLine != FIRST_LINE) {
                return CheckResult(
                        false,
                        "Your first line is \"$firstLine\" but \"$FIRST_LINE\" was expected."
                )
            }

            val thirdLine = lines[2].trim()

            if (thirdLine != THIRD_LINE) {
                return CheckResult(
                        false,
                        "Your third line is \"$thirdLine\" but \"$THIRD_LINE\" was expected."
                )
            }

            return CheckResult(true)
        }

        private fun lineOrLines(lineCount: Int): String {
            if (lineCount == 1) {
                return "line"
            }
            return "lines"
        }

        companion object {
            private const val LINE_COUNT = 4
            private const val FIRST_LINE = "Card:"
            private const val THIRD_LINE = "Definition:"
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/44/stages/232/implement
status: Solved
record: 1
