type: edu
custom_name: stage4
files:
- name: test/common/DialogClue.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    // ---- DialogClue ----

    /** May be several lines or just one. */
    interface Phrase {
        fun toPhraseLines(): List<PhraseLine>
    }

    /** list of input and output lines, combined together. */
    fun compositePhrase(block: () -> List<Phrase>) = object : Phrase {
        override fun toPhraseLines() = block().flatMap { it.toPhraseLines() }
    }

    fun compositePhrase(vararg phrases: Phrase) = object : Phrase {
        override fun toPhraseLines() = phrases.flatMap { it.toPhraseLines() }
    }

    /** Either user (input) or output phrase. Each phrase should be a line. */
    sealed class PhraseLine : Phrase {
        override fun toPhraseLines() = listOf(this)
    }

    /** Some mutable data, that is passed across dialog phrases. */
    class Context {
        val rawData = mutableMapOf<String, Any>()
    }

    class UserLine(val text: String, val updateContext: CtxUpdate = {}) : PhraseLine() {

    }
    typealias CtxUpdate = (ctx: Context) -> Unit

    class OutputLine(val checker: (text: String, ctx: Context) -> CheckResult) : PhraseLine()

    /** This function creates a line with user input (our test input).
     *
     * Unfortunately we can't access the Context, when we adding user text.
     * This occurs because of HS test framework limitations:
     * we need to pass all inputs first, and then start checking outputs. */
    fun user(text: String, updateContext: (ctx: Context) -> Unit = {}) = UserLine(text, updateContext)

    fun anyLine() = OutputLine { _, _ -> CheckResult.correct(); }

    fun containing(
            vararg parts: String,
            ignoreCase: Boolean = true,
            hint: String? = null,
            updateContext: CtxUpdate = {}
    ) = OutputLine { line, context ->
        fun buildFeedback(): String {
            val feedback = StringBuilder()
            feedback.append("Your line\n`$line`\nshould contain ${parts.joinToString("`, `", "`", "`")}")
            if (ignoreCase) {
                feedback.append(" (ignoring case)")
            }
            feedback.append(".")
            if (hint != null) {
                feedback.append("\n$hint")
            }
            return feedback.toString()
        }

        var startIndex = 0
        for (part in parts) {
            startIndex = line.indexOf(part, startIndex, ignoreCase)
            if (startIndex == -1) {
                return@OutputLine CheckResult.wrong(buildFeedback())
            }
        }
        updateContext(context) // everything is correct, update context
        CheckResult.correct();
    }

    class DialogClue(private val phrases: List<PhraseLine>) {

        private val inputPhrases = phrases.filter { it is UserLine }.map { it as UserLine }
        private val outputPhrases = phrases.filter { it is OutputLine }.map { it as OutputLine }

        fun generateInput() = inputPhrases
                .joinToString("\n", postfix = "\n") { it.text }

        fun checkOutput(output: String): CheckResult {
            val lines = output.lines()
                    .filter { it.isNotBlank() }

            fun wrongOutputSizeFeedback(): CheckResult
                    = CheckResult.wrong("The number of lines in your output is ${lines.size}, " +
                    "but it should be ${outputPhrases.size}. " +
                    "Check, that you output your lines with println, not print. And there are no extra outputs.")

    // here we store some mutable data from phrase to phrase
            val context = Context()

            val lineIter = lines.listIterator()
            phrases.forEach { phraseLine ->
                when (phraseLine) {
                    is UserLine -> phraseLine.updateContext(context)
                    is OutputLine -> {
                        if (!lineIter.hasNext()) {
                            return wrongOutputSizeFeedback()
                        }
                        val result = phraseLine.checker(lineIter.next(), context)
                        if (!result.isCorrect) {
                            return CheckResult.wrong(result.feedback)
                        }
                    }
                }
            }

            if (lineIter.hasNext()) {
                return wrongOutputSizeFeedback()
            }

            return CheckResult.correct()
        }
    }

    fun dialogTest(vararg phrases: Phrase): TestCase<DialogClue> {
        val dialogClue = DialogClue(phrases.flatMap { it.toPhraseLines() })
        return TestCase<DialogClue>()
                .setInput(dialogClue.generateInput())
                .setAttach(dialogClue)
    }
  learner_created: false
- name: test/common/FlashcardsStage4Test.kt
  visible: false
  text: |
    package common

    import flashcards.Main
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult

    abstract class FlashcardsStage4Test : StageTest<DialogClue>(Main::class.java) {

        override fun generate() = listOf(
                dialogTest(
                        anyLine(), user("2"),
                        anyLine(), user("black"),
                        anyLine(), user("white"),
                        anyLine(), user("black"),
                        containing("The card \"black\" already exists"),
                        user("red"),
                        anyLine(), user("white"),
                        containing("The definition \"white\" already exists"),
                        user("green"),
                        // asking
                        askCorrect("black", "white"),
                        askCorrect("red", "green")
                ),
                dialogTest(
                        inputNum(2),
                        inputCard("a brother of one's parent", "uncle"),
                        inputCard("a part of the body where the foot and the leg meet", "ankle"),
                        // asking
                        askWrong("a brother of one's parent", userAns = "ankle", rightAns = "uncle",
                                isDefFor = "a part of the body where the foot and the leg meet"),

                        askWrong("a part of the body where the foot and the leg meet", "???", "ankle")
                ),
                dialogTest(
                        inputNum(4),
                        inputCard("c1", "d1"),
                        inputCard("c2", "d2"),
                        inputCard("c3", "d3"),
                        // repeating three times
                        anyLine(),
                        user("c3"), containing("The card \"c3\" already exists"),
                        user("c2"), containing("The card \"c2\" already exists"),
                        user("c1"), containing("The card \"c1\" already exists"),
                        user("c4"),
                        anyLine(),
                        user("d2"), containing("The definition \"d2\" already exists"),
                        user("d3"), containing("The definition \"d3\" already exists"),
                        user("d1"), containing("The definition \"d1\" already exists"),
                        user("d4"),

                        askCorrect("c1", "d1"),
                        askWrong("c2", userAns = "d1", rightAns = "d2", isDefFor = "c1"),
                        askWrong("c3", "d3 ddd3", "d3"),
                        askWrong("c4", "???", "d4")
                )
        )

        /** Asks with a correct answer. */
        private fun askCorrect(quest: String, userAns: String) = compositePhrase {
            listOf(containing("\"$quest\"", hint = "This line should ask the definition of `$quest`."),
                    user(userAns), containing("Correct answer"))
        }

        /** Asks with a wrong answer. */
        private fun askWrong(quest: String, userAns: String, rightAns: String, isDefFor: String? = null) = compositePhrase {
            val result = mutableListOf(
                    containing("\"$quest\"", hint = "This line should ask the definition of `$quest`."),
                    user(userAns))
            if (isDefFor == null) {
                result += containing("Wrong answer", "The correct one is \"$rightAns\"")
            } else {
                result += containing("Wrong answer", "The correct one is \"$rightAns\"",
                        "you've just written the definition of \"$isDefFor\"")
            }
            result
        }

        private fun inputNum(number: Int) = compositePhrase {
            listOf(anyLine(), user(number.toString()))
        }

        private fun inputCard(card: String, def: String) = compositePhrase {
            listOf(anyLine(), user(card), anyLine(), user(def))
        }


        override fun check(reply: String, clue: DialogClue): CheckResult {
            return clue.checkOutput(reply)
        }
    }
  learner_created: false
- name: test/FlashcardsTest.java
  visible: false
  text: |
    import common.FlashcardsStage4Test;

    public class FlashcardsTest extends FlashcardsStage4Test {
        // just empty class, but not abstract so it can be run
    }
  learner_created: false
- name: src/flashcards/Main.java
  visible: true
  text: |
    package flashcards;

    import java.util.*;

    public class Main {

        public static void main(String[] args) {
            Flashcards cards = new Flashcards();
            cards.setUpFlashcards();
            cards.quiz();
        }

    }

    class Flashcards {

        private final Scanner s = new Scanner(System.in);
        private final Map<String, String> map = new LinkedHashMap<>();
        private final int numberOfCards;

        public Flashcards() {
            System.out.println("Input the number of cards:");
            this.numberOfCards = Integer.parseInt(s.nextLine());
        }

        public void setUpFlashcards() {
            for (int i = 0; i < numberOfCards; ++i) {
                System.out.printf("Card #%d:\n", i + 1);
                String key = s.nextLine();
                System.out.printf("The definition of card #%d:\n", i + 1);
                map.put(key, s.nextLine());
            }
        }

        public void quiz() {
            for (Map.Entry<String, String> e : map.entrySet()) {
                System.out.printf("Print the definition of \"%s\":\n", e.getKey());
                System.out.println(e.getValue().equals(s.nextLine()) ? "Correct answer." :
                        String.format("Wrong answer. The correct one is \"%s\".", e.getValue()));
            }
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/44/stages/235/implement
status: Solved
record: 4
