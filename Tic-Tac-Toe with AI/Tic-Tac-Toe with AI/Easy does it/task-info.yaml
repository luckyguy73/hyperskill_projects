type: edu
custom_name: stage2
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }
            return fields;
        }
    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput)
                    .setAttach(new Clue(x, y)));

                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            if (!reply.contains("Making move level \"easy\"")) {
                return new CheckResult(false,
                    "No \"Making move level \"easy\"\" line in output");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Game.java
  visible: true
  text: |
    package tictactoe;

    import java.util.*;
    import java.util.stream.Stream;

    public class Game {

        private final String[][] board = new String[3][];
        private final HashSet<String> set = new HashSet<>();
        private String field;
        private String state;
        private boolean hasEmptyCells;
        private boolean oWins;
        private boolean xWins;
        private String c;
        private int oCount;
        private int xCount;

        public Game(String s) {
            this.field = s;
            initializeBoard();
        }

        private void initializeBoard() {
            for (int r = 0, c = 0; c < field.length(); ++r, c += 3)
                board[r] = new String[]{String.valueOf(field.charAt(c)), String.valueOf(field.charAt(c + 1)),
                        String.valueOf(field.charAt(c + 2))};
        }

        public void go() {
            printBoard();
            updateBoard();
            checkBoard();
            setState();
            printState();
        }

        private void printBoard() {
            System.out.println("-".repeat(9));
            for (int r = 0; r < field.length(); r += 3)
                System.out.printf("| %s %s %s |\n", field.charAt(r), field.charAt(r + 1), field.charAt(r + 2));
            System.out.println("-".repeat(9));
        }

        private void checkBoard() {
            countChars();
            checkRows();
            checkCols();
            checkMainDiag();
            checkAltDiag();
        }

        private void countChars() {
            hasEmptyCells = field.contains("_");
            xCount = (int) field.chars().filter(c -> c == 'X').count();
            oCount = (int) field.chars().filter(c -> c == 'O').count();
        }

        private void checkRows() {
            for (String[] row : board) {
                set.clear();
                for (String col : row) set.add(c = col);
                checkForWinner();
            }
        }

        private void checkCols() {
            for (int col = 0; col < board.length; ++col) {
                set.clear();
                for (int row = 0; row < board[col].length; ++row) set.add(c = board[row][col]);
                checkForWinner();
            }
        }

        private void checkMainDiag() {
            set.clear();
            for (int cell = 0; cell < board.length; ++cell) set.add(c = board[cell][cell]);
            checkForWinner();
        }

        private void checkAltDiag() {
            set.clear();
            for (int i = 0; i < board.length; ++i) set.add(c = board[i][board.length - i - 1]);
            checkForWinner();
        }

        private void checkForWinner() {
            if (set.size() == 1 && !set.contains("_")) {
                c = set.stream().findAny().get();
                if (c.equals("X")) xWins = true;
                else oWins = true;
            }
        }

        private void setState() {
            int diff = Math.abs(xCount - oCount);
            if (xWins && oWins || diff > 1) state = "Impossible";
            else if (!xWins && !oWins && !hasEmptyCells) state = "Draw";
            else if (xWins) state = "X wins";
            else if (oWins) state = "O wins";
            else state = "Game not finished";
        }

        private void printState() { System.out.println(state); }

        private void updateBoard() {
            countChars();
            String player = xCount == oCount ? "X" : "O";
            Scanner scan = new Scanner(System.in);
            int num1, num2;
            boolean loop = true;
            while (loop) {
                System.out.print("Enter the coordinates: ");
                String input = scan.nextLine();
                if (Character.isDigit(input.charAt(0)) && Character.isDigit(input.charAt(2))) {
                    num1 = Integer.parseInt(input.substring(0, 1));
                    num2 = Integer.parseInt(input.substring(2));
                    if (num1 > 0 && num1 < 4 & num2 > 0 & num2 < 4) {
                        int[] nums = convertCoordinates(num1, num2);
                        if (board[nums[0]][nums[1]].equals("_")) {
                            board[nums[0]][nums[1]] = player;
                            loop = false;
                        } else {
                            System.out.println("This cell is occupied! Choose another one!");
                        }
                    } else {
                        System.out.println("Coordinates should be from 1 to 3!");
                    }
                } else {
                    System.out.println("You should enter numbers!");
                }
            }
            scan.close();
            field = String.join("", Stream.of(board).flatMap(Stream::of).toArray(String[]::new));
            printBoard();
        }

        private int[] convertCoordinates(int first, int second) {
            int row = 3 - second;
            int col = first - 1;
            return new int[]{row, col};
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/448/implement
status: Unchecked
record: -1
