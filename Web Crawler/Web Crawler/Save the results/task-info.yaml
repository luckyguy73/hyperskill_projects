type: edu
custom_name: stage5
files:
- name: test/CrawlerTest.java
  visible: false
  text: |
    import common.WebCrawlerStage5Test;

    public class CrawlerTest extends WebCrawlerStage5Test {

    }
  learner_created: false
- name: test/common/WebCrawlerCommonTestGenerator.kt
  visible: false
  text: |
    package common

    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<WebCrawlerClue>> {
        return listOf(
            createWebCrawlerTest("Window is not visible") { frameGetter().isVisible.toCheckResult() },
            createWebCrawlerTest("Window title is empty") { frameGetter().title.isNotEmpty().toCheckResult() }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
        val name: String,
        val isEnabled: Boolean,
        private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<WebCrawlerClue>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<WebCrawlerClue> {
            return createWebCrawlerTest("No suitable component '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }.toCheckResult()
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<WebCrawlerClue>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<WebCrawlerClue> {
            return if (requirements.isEnabled) {
                createWebCrawlerTest("'${requirements.name}' should be enabled") {
                    val component = requireNotNull(requirements.suitableComponent) {
                        "Should check for the component existence before"
                    }

                    return@createWebCrawlerTest component.isEnabled.toCheckResult()
                }
            } else {
                createWebCrawlerTest("'${requirements.name}' should be disabled") {
                    val component = requireNotNull(requirements.suitableComponent) {
                        "Should check for the component existence before"
                    }

                    return@createWebCrawlerTest (!component.isEnabled).toCheckResult()
                }
            }
        }

        return components.map(::generateIsEnabledTest)
    }
  learner_created: false
- name: test/common/WebCrawlerLocalhostPages.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.v6.mocks.web.WebPage
    import org.hyperskill.hstest.v6.mocks.web.WebServerMock
    import org.hyperskill.hstest.v6.testcase.TestCase

    fun <AttachType> TestCase<AttachType>.withLocalhostPagesOn(port: Int): TestCase<AttachType> {
        val webServerMock = WebServerMock(port).apply {
            pages.forEach { _, (_, content, relativeUrl) ->
                setPage(relativeUrl,
                        WebPage().setContent(content).setContentType("text/html")) }
        }

        return this.runWith(webServerMock)
    }

    data class PageProperties(val title: String, val content: String, val relativePath: String, val childUrls: Set<String>)

    val pages = mapOf(
        localhost(PORT, "/exampleDotCom") to PageProperties(
            "Example Domain",
            """<!doctype html>
    <html>
    <head>
        <title>Example Domain</title>

        <meta charset="utf-8" />
        <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style type="text/css">
        body {
            background-color: #f0f0f2;
            margin: 0;
            padding: 0;
            font-family: "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;

        }
        div {
            width: 600px;
            margin: 5em auto;
            padding: 50px;
            background-color: #fff;
            border-radius: 1em;
        }
        a:link, a:visited {
            color: #38488f;
            text-decoration: none;
        }
        @media (max-width: 700px) {
            body {
                background-color: #fff;
            }
            div {
                width: auto;
                margin: 0 auto;
                border-radius: 0;
                padding: 1em;
            }
        }
        </style>
    </head>

    <body>
    <div>
        <h1>Example of Example Domain</h1>
        <p>This domain is established to be used for illustrative examples in documents. You may use this
        domain in examples without prior coordination or asking for permission.</p>
        <p><a href="unavailablePage">More information...</a></p>
    </div>
    </body>
    </html>""",
            "/exampleDotCom",
            setOf(localhost(PORT, "/unavailablePage"))
        ),
        localhost(PORT, "/circular1") to PageProperties(
            "circular1tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular1tiTle</title>
                |</head>
                |<body>
                |<a href="circular2">link1</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular1",
            setOf(localhost(PORT, "/circular2"))
        ),
        localhost(PORT, "/circular2") to PageProperties(
            "circular2tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular2tiTle</title>
                |</head>
                |<body>
                |<a href="circular3">link1</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular2",
            setOf(localhost(PORT, "/circular3"))
        ),
        localhost(PORT, "/circular3") to PageProperties(
            "circular3tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular3tiTle</title>
                |</head>
                |<body>
                |<a href="circular1">link</a>
                |<a href="exampleDotCom">link</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular3",
            setOf(localhost(PORT, "/circular1"), localhost(PORT, "/exampleDotCom"))
        )
    )
  learner_created: false
- name: test/common/WebCrawlerStage5Test.kt
  visible: false
  text: |
    package common

    import org.assertj.swing.fixture.*
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    import crawler.WebCrawler
    import org.hyperskill.hstest.v6.common.Utils
    import java.io.File

    abstract class WebCrawlerStage5Test : SwingTest<WebCrawlerClue>(WebCrawler()) {

        override fun generate(): List<TestCase<WebCrawlerClue>> {
            val titlesTable = ComponentRequirements("TitlesTable", isEnabled = false) { window.table(it) }
            val urlText = ComponentRequirements("UrlTextField", isEnabled = true) { window.textBox(it) }
            val getButton = ComponentRequirements("RunButton", isEnabled = true) { window.button(it) }
            val titleLabel = ComponentRequirements("TitleLabel", isEnabled = true) { window.label(it) }
            val saveButton = ComponentRequirements("ExportButton", isEnabled = true) { window.button(it) }
            val pathToFileText = ComponentRequirements("ExportUrlTextField", isEnabled = true) { window.textBox(it) }

            return frameTests(::frame) +
                    existenceTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +
                    componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +
                    stage3Tests(
                        titleLabelRequirements = titleLabel,
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText
                    ) +
                    stage4Tests(
                        titlesTableRequirements = titlesTable,
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText
                    ) +
                    stage5Tests(
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText,
                        saveButtonRequirements = saveButton,
                        savePathTextFieldRequirements = pathToFileText,
                        depth = 1
                    )
        }

        override fun check(reply: String, clue: WebCrawlerClue): CheckResult {
            return checkWebCrawlerTest(reply = reply, clue = clue)
        }
    }

    fun stage3Tests(
            titleLabelRequirements: ComponentRequirements<JLabelFixture>,
            getTextButtonRequirements: ComponentRequirements<JButtonFixture>,
            locationTextFieldRequirements: ComponentRequirements<JTextComponentFixture>
    ): List<TestCase<WebCrawlerClue>> {
        return listOf(
                createWebCrawlerTest("Title your app shows is wrong") {
                    val locationTextField = locationTextFieldRequirements.requireExistingComponent()
                    val getTextButton = getTextButtonRequirements.requireExistingComponent()
                    val titleLabel = titleLabelRequirements.requireExistingComponent()

                    return@createWebCrawlerTest pages
                            .asSequence()
                            .map { (url, pageProperties) ->
                                locationTextField.setText(url)

                                getTextButton.click()

                                Utils.sleep(100)

                                val titleInLabel = titleLabel.text().orEmpty()

                                return@map titleInLabel == pageProperties.title
                            }
                            .all { it }
                            .toCheckResult()
                }.withLocalhostPagesOn(PORT)
        )
    }


    fun stage4Tests(
            titlesTableRequirements: ComponentRequirements<JTableFixture>,
            getTextButtonRequirements: ComponentRequirements<JButtonFixture>,
            locationTextFieldRequirements: ComponentRequirements<JTextComponentFixture>
    ): List<TestCase<WebCrawlerClue>> {
        return listOf(
                createWebCrawlerTest {
                    val locationTextField = locationTextFieldRequirements.requireExistingComponent()
                    val getTextButton = getTextButtonRequirements.requireExistingComponent()
                    val titleTable = titlesTableRequirements.requireExistingComponent()

                    for (url in pages.keys) {
                        locationTextField.setText(url)

                        getTextButton.click()

                        Utils.sleep(100)

                        val contents = titleTable.contents()

                        if (contents.any { it.size != 2 }) {
                            return@createWebCrawlerTest fail("Table your app shows has a wrong number of columns")
                        }

                        val actualLinks = url.deepUrls(depth = 1).size

                        if (contents.size != actualLinks) {
                            return@createWebCrawlerTest fail("Table your app shows has a wrong number of rows. " +
                                    "Should be $actualLinks instead of ${contents.size}")
                        }

                        for ((writtenUrl, writtenTitle) in contents) {
                            if (!pages.containsKey(writtenUrl)) {
                                return@createWebCrawlerTest fail("Your app shows a link " +
                                        "to the page that is unavailable. " +
                                        "You shouldn't add to the table unavailable links.")
                            }
                            if (pages.getValue(writtenUrl).title != writtenTitle) {
                                return@createWebCrawlerTest fail("Table your app shows contains an incorrect row")
                            }
                        }
                    }

                    return@createWebCrawlerTest CheckResult(true)
                }.withLocalhostPagesOn(PORT)
        )
    }

    fun stage5Tests(
        saveButtonRequirements: ComponentRequirements<JButtonFixture>,
        getTextButtonRequirements: ComponentRequirements<JButtonFixture>,
        locationTextFieldRequirements: ComponentRequirements<JTextComponentFixture>,
        savePathTextFieldRequirements: ComponentRequirements<JTextComponentFixture>,
        depthTextFieldRequirements: ComponentRequirements<JTextComponentFixture>? = null,
        depthCheckBoxRequirements: ComponentRequirements<JCheckBoxFixture>? = null,
        parsedLabelRequirements: ComponentRequirements<JLabelFixture>? = null,
        depth: Int
    ): List<TestCase<WebCrawlerClue>> {
        return listOf(
            createWebCrawlerTest {
                val locationTextField = locationTextFieldRequirements.requireExistingComponent()
                val getTextButton = getTextButtonRequirements.requireExistingComponent()
                val saveButton = saveButtonRequirements.requireExistingComponent()
                val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()

                val depthTextField = depthTextFieldRequirements?.requireExistingComponent()
                val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()
                val parsedLabel = parsedLabelRequirements?.requireExistingComponent()

                for (url in pages.keys) {
                    depthTextField?.setText("$depth")
                    depthCheckBox?.enable()

                    locationTextField.setText(url)

                    getTextButton.click()

                    val fileName = File("").absolutePath + "/temp.log"

                    savePathTextField.setText(fileName)

                    saveButton.click()

                    val file = File(fileName)

                    if (!file.exists()) {
                        return@createWebCrawlerTest fail("Your app doesn't create a file")
                    }

                    val contents = file.readText().lines().chunked(2).filter { it.size == 2 }
                    val deepUrls = url.deepUrls(depth)

                    if (contents.size != deepUrls.size) {
                        return@createWebCrawlerTest fail("File your app saves has a wrong lines number")
                    }

                    if (contents.map { it.first() }.toSet() != deepUrls) {
                        return@createWebCrawlerTest fail("File your app saves has a wrong child url")
                    }

                    for ((writtenUrl, writtenTitle) in contents) {
                        if (pages.getValue(writtenUrl).title != writtenTitle) {
                            return@createWebCrawlerTest fail("File your app saves has a wrong pair of lines")
                        }
                    }
                }

                return@createWebCrawlerTest CheckResult(true)
            }.withLocalhostPagesOn(PORT)
        )
    }
  learner_created: false
- name: test/common/WebCrawlerUtil.kt
  visible: false
  text: |
    package common

    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.assertj.swing.fixture.JCheckBoxFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    const val PORT = 25555  // TODO: maybe use another port?

    class WebCrawlerClue(val feedback: String?, val checker: () -> CheckResult)

    fun createWebCrawlerTest(feedback: String? = null, checker: () -> CheckResult): TestCase<WebCrawlerClue> {
        return TestCase<WebCrawlerClue>()
            .setAttach(
                WebCrawlerClue(
                    feedback = feedback,
                    checker = checker
                )
            )
    }

    fun checkWebCrawlerTest(reply: String, clue: WebCrawlerClue): CheckResult {
        return try {
            val (result, feedback) = clue.checker()

            CheckResult(result, clue.feedback ?: feedback)
        } catch (e: AssertionError) {
            CheckResult(false, clue.feedback)
        }
    }

    private operator fun CheckResult.component1() = isCorrect
    private operator fun CheckResult.component2() = feedback

    fun Boolean.toCheckResult() = CheckResult(this)

    fun fail(message: String) = CheckResult(false, message)

    fun htmlTextsAreEqual(source: String, inTextField: String): Boolean {
        fun String.formatted(): String {
            return this.trim().replace("\r\n", "\n").replace("\r", "\n")
        }

        return source.formatted() == inTextField.formatted()
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>> ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }

    fun localhost(port: Int, url: String) = "http://localhost:$port$url"

    fun String.deepUrls(depth: Int): Set<String> {
        return deepUrlsOld(depth) + setOf(this)
    }

    fun String.deepUrlsOld(depth: Int): Set<String> {
        fun String.childrenOrEmpty(): Set<String> {
            val pageProperties = pages[this]

            if (depth < 0 || pageProperties == null) {
                return emptySet()
            }

            return pageProperties.childUrls.filter { it in pages }.toSet()
        }

        var remainingDepth = depth - 1
        val answer = this.childrenOrEmpty().toMutableSet()
        while (remainingDepth > 0) {
            val next = answer.flatMap { it.childrenOrEmpty() } - answer

            if (next.isEmpty()) {
                break
            }

            answer.addAll(next)

            --remainingDepth
        }

        return answer
    }

    fun JCheckBoxFixture.enable() {
        if (!this.isEnabled) {
            this.click()
        }
    }
  learner_created: false
- name: src/crawler/WebCrawler.java
  visible: true
  text: |
    package crawler;

    import javax.swing.*;
    import java.awt.*;
    import java.io.*;
    import java.net.*;
    import java.nio.charset.StandardCharsets;
    import java.util.*;
    import java.util.List;
    import java.util.regex.*;
    import java.util.regex.Pattern;

    public class WebCrawler extends JFrame {

        private final List<String> urls = new ArrayList<>();
        private final List<String> titles = new ArrayList<>();
        private final WebCrawlerTableModel model = new WebCrawlerTableModel(urls, titles);
        private final JTable table = new JTable(model);
        private final JTextField textField = new JTextField(40);
        private final JButton runButton = new JButton("Parse");
        private final JLabel titleLabel = new JLabel();

        public WebCrawler() {
            setFieldSettings();
            setPanels();
            initialize();
        }

        private void setFieldSettings() {
            table.setEnabled(false);
            table.setName("TitlesTable");
            textField.setName("UrlTextField");
            titleLabel.setName("TitleLabel");
            runButton.setName("RunButton");
            runButton.addActionListener(a -> buttonAction());
        }

        private void buttonAction() {
            final String url = textField.getText();
            System.out.println("URL: " + url);
            String siteText = "";
            try (InputStream inputStream = new BufferedInputStream(new URL(url).openStream())) {
                siteText = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
            }  catch (Exception e) { System.out.println(e.getMessage()); }
            titleLabel.setText(parseTitle(siteText));
            addOriginalUrlToTable(url);
            addUrls(siteText);
            addTitles();
            deleteMissingTitles();
            model.fireTableDataChanged();
        }

        private void setPanels() {
            Container pane = this.getContentPane();
            pane.removeAll();
            pane.setLayout(new GridBagLayout());
            this.getRootPane().setDefaultButton(runButton);
            GridBagConstraints c = new GridBagConstraints();
            c.insets = new Insets(0, 5, 0, 5);
            c.fill = GridBagConstraints.HORIZONTAL;
            c.weightx = 0.5;
            c.gridwidth = 1;
            c.gridx = 0;
            c.gridy = 0;
            pane.add(new JLabel("URL: "), c);
            c.gridx = 1;
            c.gridy = 0;
            pane.add(textField, c);
            c.gridx = 2;
            c.gridy = 0;
            pane.add(runButton, c);
            c.gridx = 0;
            c.gridy = 1;
            pane.add(new JLabel("Title: "), c);
            c.gridx = 1;
            c.gridy = 1;
            pane.add(titleLabel, c);
            c.weightx = 1;
            c.gridwidth = 3;
            c.gridx = 0;
            c.gridy = 2;
            pane.add(getScrollPane(), c);
        }

        private JScrollPane getScrollPane() {
            table.setEnabled(false);
            JScrollPane scroller = new JScrollPane(table);
            scroller.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scroller.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
            return scroller;
        }

        private void initialize() {
            setTitle("Web Crawler");
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            pack();
            setLocationRelativeTo(null);
            setVisible(true);
        }

        private String parseTitle(String text) {
            Pattern pattern = Pattern.compile("<title>(.+)</title>");
            Matcher matcher = pattern.matcher(text);
            if (matcher.find()) {
                return matcher.group(1);
            } else {
                return "Not Found";
            }
        }

        private void addOriginalUrlToTable(String url) {
            urls.clear();
            urls.add(url);
        }

        private void addUrls(String siteText) {
            Pattern pattern = Pattern.compile("(?i)<a\\s+(?:[^>]*?\\s+)?href=([\"'])(.*?)\\1");
            Matcher matcher = pattern.matcher(siteText);
            String initialUrl = urls.get(0);
            String protocol = initialUrl.substring(0, initialUrl.indexOf("//"));
            Matcher baseUrlMatch = Pattern.compile("^.+/").matcher(initialUrl);
            baseUrlMatch.find();
            String baseUrl = baseUrlMatch.group();
            StringBuilder url;
            while (matcher.find()) {
                url = new StringBuilder();
                String text = matcher.group(2);
                if (text.startsWith("#")) {
                    continue;
                }
                if (!text.startsWith("http")) {
                    if (text.startsWith("//")) {
                        url.append(protocol).append(text);
                    } else if (text.startsWith("/")) {
                        url.append(initialUrl).append(text);
                    } else {
                        url.append(baseUrl).append(text);
                    }
                } else {
                    url.append(text);
                }
                urls.add(url.toString());
            }
            System.out.printf("added %d urls from %s\n", urls.size(), urls.get(0));
        }

        private void addTitles() {
            titles.clear();
            String siteText = "";
            for (String url : urls) {
                try {
                    URLConnection conn = new URL(url).openConnection();
                    int code = ((HttpURLConnection) conn).getResponseCode();
                    if (code == 404 || !conn.getContentType().startsWith("text/html")) {
                        titles.add("Not Found");
                        continue;
                    }
                    try (InputStream is = new BufferedInputStream(conn.getInputStream())){
                        siteText = new String(is.readAllBytes(), StandardCharsets.UTF_8);
                    }
                } catch (IOException e) { System.out.println(e.getMessage()); }
                titles.add(parseTitle(siteText));
            }
            System.out.printf("added %d titles from %s\n", titles.size(), titles.get(0));
        }


        private void deleteMissingTitles() {
            int j = 0;
            for (int i = 0; i < urls.size(); ++i) {
                if (!titles.get(i).equals("Not Found")) {
                    urls.set(j, urls.get(i));
                    titles.set(j++, titles.get(i));
                }
            }
            updateList(j, urls);
            updateList(j, titles);
        }

        private void updateList(int j, List<String> list) {
            List<String> t = new ArrayList<>(list);
            list.clear();
            list.addAll(t.subList(0, j));
        }

    }
  learner_created: true
- name: src/crawler/WebCrawlerTableModel.java
  visible: true
  text: |
    package crawler;

    import javax.swing.table.AbstractTableModel;
    import java.util.*;

    public class WebCrawlerTableModel extends AbstractTableModel {

        private final List<String> urls;
        private final List<String> titles;
        private final String[] tableHeaders = {"URL", "Title"};

        public WebCrawlerTableModel(List<String> urls, List<String> titles) {
            super();
            this.urls = urls;
            this.titles = titles;
        }

        @Override
        public int getRowCount() {
            return urls.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public String getValueAt(int row, int col) {
            return col == 0 ? urls.get(row) : titles.get(row);
        }

        @Override
        public String getColumnName(int columnIndex) {
            return tableHeaders[columnIndex];
        }

    }
  learner_created: true
- name: src/crawler/ApplicationRunner.java
  visible: true
  text: |
    package crawler;

    public class ApplicationRunner {

        public static void main(String[] args) {
            new WebCrawler();
        }

    }
  learner_created: true
- name: temp.log
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/59/stages/321/implement
status: Solved
record: 2
